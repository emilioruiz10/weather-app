---
import FavoriteCitySelect from "../components/FavoriteCitySelect.astro";
import Search from "../components/Search.astro";
import RootLayout from "../layout/RootLayout.astro";
---

<RootLayout title="Weather APP">
	<header
		id="header"
		class="sticky top-0 z-50 flex items-center justify-between bg-white/10 px-8 py-6 transition-transform duration-300"
	>
		<h1 class="text-xl font-bold text-white">Weather App</h1>
	</header>
	<main class="max-w-11/12 px-20 py-6">
		<div class="flex justify-between">
			<FavoriteCitySelect />
			<Search />
		</div>
		<section
			id="current"
			class="relative mx-auto my-12 flex w-[300px] flex-col space-y-1 rounded-2xl border border-white/20 bg-gray-500/30 p-6 text-center text-white shadow-lg backdrop-blur-md sm:w-[400px]"
		>
		</section>
		<section class="mb-8">
			<h2 class="text-xl font-bold">Daily Forecast</h2>
			<div id="five-days" class="flex flex-wrap justify-between gap-4"></div>
		</section>
		<section>
			<h2 class="text-xl font-bold">Hourly Forecast</h2>
			<div id="every-three-hours" class="flex flex-wrap justify-between"></div>
		</section>
	</main>
	<script>
		import { getWeatherDescription } from "../utils/convertWeatherCode";
		import { formatDateToYYYYMMDD, formatHour } from "../utils/date";

		let currentLocation = {
			latitude: "49.2827",
			longitude: "-123.1207",
		};
		navigator.geolocation.getCurrentPosition(
			(pos) => {
				currentLocation = {
					latitude: String(pos.coords.latitude),
					longitude: String(pos.coords.longitude),
				};
			},
			(_err) => {
				alert("failed to get the current position");
			},
		);

		const hourly = "temperature_2m,precipitation_probability,weather_code";
		const forecast_days = "5";
		const current = "temperature_2m,is_day,precipitation,weather_code,apparent_temperature";
		const daily = "weather_code,temperature_2m_max,temperature_2m_min,sunrise,sunset";
		const meteoUrl = "https://api.open-meteo.com/v1/forecast";
		const currentContainer = document.getElementById("current");
		const fiveDaysContainer = document.getElementById("five-days");
		const everyThreeHoursContainer = document.getElementById("every-three-hours");

		const fetchCurrentCity = async (latitude, longitude) => {
			const response = await fetch(`https://api.radar.io/v1/geocode/reverse?coordinates=${latitude},${longitude}`, {
				headers: {
					Authorization: "prj_live_pk_2fb2c81cb7c057cb30ce030dbd1f7a3b105179f9",
				},
			});
			const locationData = await response.json();
			const currentCity = locationData.addresses[0].city ?? locationData.addresses[0].addressLabel;

			return currentCity;
		};

		const fetchWeatherData = async (url, latitude, longitude) => {
			const response = await fetch(url);
			if (response.ok) {
				const fetchData = await response.json();
				/**
				 * Current Result Example
				 * interval: 900
				 * is_day: 1
				 * precipitation: 0
				 * temperature_2m: 13
				 * time: "2025-04-14T22:15"
				 * weather_code: 3
				 */
				const currentWeather = { ...fetchData.current, ...currentLocation };
				const weatherInfo = getWeatherDescription(currentWeather.weather_code);
				const isRainy = weatherInfo.image === "/images/bg-rain.webp";
				const rainbowChance = Math.random() < 0.001;

				if (isRainy && rainbowChance) {
					document.body.style.backgroundImage = `url('/images/bg-rainbow.png')`;
				} else {
					document.body.style.backgroundImage = `url('${weatherInfo.background}')`;
				}

				const temp = currentWeather.temperature_2m;

				const locationName = await fetchCurrentCity(latitude, longitude);
				const today = new Date();
				const formattedDate = today.toLocaleDateString("en-US", {
					weekday: "long",
					year: "numeric",
					month: "long",
					day: "numeric",
				});

				currentContainer.innerHTML = `
						<div class="relative text-center text-xl font-bold">
							<h2 class="text-2xl">${locationName}</h2>
							<button 
							class="favorite-btn text-2xl absolute -top-2 -right-1 hover:scale-110 transition-transform"
							data-city= "${locationName}"
							data-lat= "${latitude}"
							data-lng= "${longitude}"
							>★</button>
              
						</div>
						<div class="sm:flex items-center">
							<div class="size-30 mx-auto sm:mx-0 sm:flex-[1]">
								<img src="${weatherInfo.image}" alt="${weatherInfo.name}" class="size-full object-contain" />
							</div>
							<div class="flex flex-col sm:mx-auto sm:flex-[1]">
								<span class="text-center text-lg sm:text-3xl font-semibold">${weatherInfo.name}</span>
								<span class="text-center text-4xl font-bold">${temp}°C</span>
							</div>
						</div>
						<span class="text-center text-sm opacity-80 mt-2">${formattedDate}</span>
				`;

				setTimeout(() => {
					const favoriteBtn = document.querySelector(".favorite-btn");

					if (!favoriteBtn) {
						console.error("Favorite button not found in DOM.");
						return;
					}

					const cityName = favoriteBtn.dataset.city;
					const lat = favoriteBtn.dataset.lat;
					const lng = favoriteBtn.dataset.lng;

					console.log("Favorite button found:", cityName, lat, lng);

					const favorites = JSON.parse(localStorage.getItem("favorites") || "[]");
					const isFavorited = favorites.some((f) => f.city === cityName);

					if (isFavorited) {
						favoriteBtn.classList.add("text-yellow-400");
					}

					favoriteBtn.addEventListener("click", () => {
						const favorites = JSON.parse(localStorage.getItem("favorites") || "[]");
						const exists = favorites.find((f) => f.city === cityName);

						if (exists) {
							const event = new CustomEvent("locationSelected", {
								detail: { location: exists.city, lat: exists.lat, lng: exists.lng },
								bubbles: true,
							});
							document.dispatchEvent(event);
						} else {
							favorites.push({ city: cityName, lat, lng });
							localStorage.setItem("favorites", JSON.stringify(favorites));
							favoriteBtn.classList.add("text-yellow-400");
						}
					});
				}, 0);

				const fiveDays = fetchData.daily.time;
				const fiveDaysTempMax = fetchData.daily.temperature_2m_max;
				const fiveDaysTempMin = fetchData.daily.temperature_2m_min;
				const fiveWeatherCode = fetchData.daily.weather_code;
				const fiveDaysWeather = fiveDays.map((f, index) => {
					return {
						day: f,
						tempMax: fiveDaysTempMax[index],
						tempMin: fiveDaysTempMin[index],
						weekCode: fiveWeatherCode[index],
					};
				});

				fiveDaysContainer.innerHTML = `
					${fiveDaysWeather
						.map((w) => {
							const weekday = new Date(w.day).toLocaleString("en-US", { weekday: "short" });
							const img = getWeatherDescription(w.weekCode);
							const temp = `${w.tempMin}°C / ${w.tempMax}°C`;

							return `
							<div key={${w.day}} class="flex w-40 flex-col gap-2 rounded-xl bg-white/50 p-4 text-center shadow backdrop-blur-md items-center">
								<h3 class="font-semibold">${weekday}</h3>
								<img src="${img.image}" alt="${img.name}" class="size-8" />
								<p>${temp}</p>
							</div>
						`;
						})
						.join("")}
				`;

				const currentDate = formatDateToYYYYMMDD(new Date());
				const hourlyData = fetchData.hourly.time.map((time, index) => ({
					time,
					date: time.split("T")[0],
					hour: Number(time.split("T")[1].split(":")[0]),
					temperature: fetchData.hourly.temperature_2m[index],
					precipitationProbability: fetchData.hourly.precipitation_probability[index],
					weatherCode: fetchData.hourly.weather_code[index],
				}));

				const selectedDayHourly = hourlyData.filter((data) => data.date === currentDate && data.hour % 3 === 0);

				everyThreeHoursContainer.innerHTML = `
					${selectedDayHourly
						.map((w) => {
							const img = getWeatherDescription(w.weatherCode);

							return `
							<div key={${formatHour(w.hour)}} class="flex w-30 flex-col gap-2 rounded-xl bg-white/50 p-4 text-center items-center shadow backdrop-blur-md">
								<h3 class="font-semibold">${formatHour(w.hour)}</h3>
								<img src="${img.image}" alt="${img.name}" class="size-8" />
								<p class="temperature">${w.temperature}</p>
							</div>
						`;
						})
						.join("")}
				`;
			} else {
				alert("Failed to fetch weather data");
			}
		};

		document.addEventListener("DOMContentLoaded", async function () {
			const params = { ...currentLocation, current, daily, hourly, forecast_days };
			const urlSearchParams = new URLSearchParams(params);
			const url = `${meteoUrl}?${urlSearchParams}`;
			await fetchWeatherData(url, currentLocation.latitude, currentLocation.longitude);
		});

		document.addEventListener("locationSelected", async (e) => {
			const detail = e.detail;

			const lat = detail.lat;
			const lng = detail.lng;
			currentLocation = { latitude: lat, longitude: lng };
			const params = { ...currentLocation, current, daily, hourly, forecast_days };
			const urlSearchParams = new URLSearchParams(params);
			const url = `${meteoUrl}?${urlSearchParams}`;

			await fetchWeatherData(url, currentLocation.latitude, currentLocation.longitude);
		});

		let lastScrollY = window.scrollY;
		const header = document.getElementById("header");

		window.addEventListener("scroll", () => {
			const currentScrollY = window.scrollY;

			if (currentScrollY === 0) {
				// When you are in top -> show
				header.style.transform = "translateY(0)";
			} else if (currentScrollY > lastScrollY) {
				// Scrolling down → hidden
				header.style.transform = "translateY(-100%)";
			} else {
				// Scrolling up → show
				header.style.transform = "translateY(0)";
			}

			lastScrollY = currentScrollY;
		});
	</script>
</RootLayout>
